name: Build
permissions: {}

on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "examples/**"
      - "src/**"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".github/workflows/build.yml"
      - "examples/**"
      - "src/**"
      - "Cargo.toml"

## To trigger this workflow using `act` (https://github.com/nektos/act) you can do the following.
#    act push -j build

jobs:
  build:
    name: Build and Test
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    # Make warnings errors, this is to prevent warnings slipping through.
    # This is done globally to prevent rebuilds when the RUSTFLAGS env variable changes.
    env:
      RUSTFLAGS: "-D warnings"

    steps:
      # Install dependencies
      - name: "Install dependencies Ubuntu"
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential pkg-config openssl libssl-dev
      # End Install dependencies


      # Install Rust with clippy
      - name: "Install rust-toolchain version"
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable at Apr 29, 2025, 9:23 PM GMT+2
        with:
          components: clippy
      # End Install Rust with clippy

      # Show environment
      - name: "Show environment"
        run: |
          rustc -vV
          cargo -vV
      # End Show environment

      # Checkout the repo
      - name: "Checkout"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      # End Checkout the repo

      # Enable Rust Caching
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      # End Enable Rust Caching

      # Run cargo commands
      - name: "Run cargo update"
        id: run_cargo_update
        if: ${{ always() }}
        run: |
          cargo update --verbose

      - name: "cargo test"
        id: run_cargo_test
        if: ${{ always() }}
        run: |
          cargo test --verbose

      - name: "Build all features"
        id: build_all_features
        if: ${{ always() }}
        run: |
          cargo build --all-features --verbose

      - name: "Build otp example"
        id: build_example_otp
        if: ${{ always() }}
        run: |
          cargo build --example otp

      - name: "Build otp_async example"
        id: build_example_otp_async
        if: ${{ always() }}
        run: |
          cargo build --example otp_async

      - name: "Build otp_custom example"
        id: build_example_otp_custom
        if: ${{ always() }}
        run: |
          cargo build --example otp_custom

      - name: "Build otp_with_proxy example"
        id: build_example_otp_with_proxy
        if: ${{ always() }}
        run: |
          cargo build --example otp_with_proxy
      # End Run cargo tests


      # Run cargo clippy, and fail on warnings
      - name: "Run clippy"
        id: run_cargo_clippy
        if: ${{ always() }}
        run: |
          cargo clippy --all-features

      - name: "Run clippy"
        id: run_cargo_clippy_examples
        if: ${{ always() }}
        run: |
          cargo clippy --examples
      # End Run cargo clippy


      # Check for any previous failures, if there are stop, else continue.
      # This is useful so all test/clippy/fmt actions are done, and they can all be addressed
      - name: "Some checks failed"
        if: ${{ failure() }}
        env:
          RUN_CARGO_UPDATE: ${{ steps.run_cargo_update.outcome }}
          RUN_CARGO_TEST: ${{ steps.run_cargo_test.outcome }}
          BUILD_ALL: ${{ steps.build_all_features.outcome }}
          EXAMPLE_OTP: ${{ steps.build_example_otp.outcome }}
          EXAMPLE_OTP_ASYNC: ${{ steps.build_example_otp_async.outcome }}
          EXAMPLE_OTP_CUSTOM: ${{ steps.build_example_otp_custom.outcome }}
          EXAMPLE_OTP_WITH_PROXY: ${{ steps.build_example_otp_with_proxy.outcome }}
          RUN_CARGO_CLIPPY: ${{ steps.run_cargo_clippy.outcome }}
          RUN_CARGO_CLIPPY_EXAMPLES: ${{ steps.run_cargo_clippy_examples.outcome }}
        run: |
          echo "### :x: Checks Failed!" >> ${GITHUB_STEP_SUMMARY}
          echo "" >> ${GITHUB_STEP_SUMMARY}
          echo "|Job|Status|" >> ${GITHUB_STEP_SUMMARY}
          echo "|---|------|" >> ${GITHUB_STEP_SUMMARY}
          echo "|cargo update|${RUN_CARGO_UPDATE}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|cargo test|${RUN_CARGO_TEST}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|build all features|${BUILD_ALL}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|build example otp|${EXAMPLE_OTP}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|build example otp_async|${EXAMPLE_OTP_ASYNC}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|build example otp_custom|${EXAMPLE_OTP_CUSTOM}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|build example otp_with_proxy|${EXAMPLE_OTP_WITH_PROXY}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|clippy all features|${RUN_CARGO_CLIPPY}|" >> ${GITHUB_STEP_SUMMARY}
          echo "|clippy examples|${RUN_CARGO_CLIPPY_EXAMPLES}|" >> ${GITHUB_STEP_SUMMARY}
          echo "" >> ${GITHUB_STEP_SUMMARY}
          echo "Please check the failed jobs and fix where needed." >> ${GITHUB_STEP_SUMMARY}
          echo "" >> ${GITHUB_STEP_SUMMARY}
          exit 1


      # If all was ok, then we show this
      - name: "All checks passed"
        if: ${{ success() }}
        run: |
          echo "### :tada: Checks Passed!" >> ${GITHUB_STEP_SUMMARY}
          echo "" >> ${GITHUB_STEP_SUMMARY}
